{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyORMH8sHkP0+i5NLTnZgyMW"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":29,"metadata":{"id":"DWMbnTHqzYIV","colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"status":"ok","timestamp":1759642650094,"user_tz":-360,"elapsed":20,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"36e560f9-f541-46db-9283-76148ef9d00f"},"outputs":[{"output_type":"stream","name":"stdout","text":["42\n","3.23\n","<class 'int'> <class 'float'>\n","Mukti\n","[1, 2, 3, 4, 5, ['Mukti', 'CSE', 1094, 800, 5]]\n","[1, 2, 3, 4, 5, ['Mukti', 'CSE', 1094, 800, 5], 1000]\n","[[1, 2, 3, 4], [6, 7, 8, 9]]\n","<class 'list'>\n","(1, 2, 3, 4)\n","<class 'tuple'>\n","((1, 2, 3, 4), ('Mukti', 'Shifat', 1094, 2330), ('Apple', 2.34, 8, 0))\n","{'a': 1, 'b': 3, 'c': 10}\n","<class 'dict'>\n","{'a': 10, 'b': 3}\n"]}],"source":["x= 42       #int\n","y=3.23      #float\n","print(x)\n","print(y)\n","print(type(x),type(y))\n","z=\"Mukti\"  #string\n","t=True     #bool\n","print(z)\n","\n","lst = [1, 2, 3, 4, 5, [\"Mukti\", \"CSE\", 1094, 200*4, 10-5]] #list-> Mutable: can change any time\n","print(lst)\n","lst.append(1000)\n","print(lst) #append() means to add a new element at the end of a list.\n","lst2D=[[1,2,3,4],[6,7,8,9]]\n","print(lst2D)\n","print(type(lst2D))\n","\n","#class \"Tupple\" always immutable\n","tple= (1,2,3,4)\n","print(tple)\n","print(type(tple))\n","\n","tple2=((1,2,3,4),(\"Mukti\",\"Shifat\",1094,2330),(\"Apple\",2.34,4*2,6%2))\n","print(tple2)\n","\n","\n","#dictionary always mutable\n","dct={\"a\":1,\"b\":3, \"c\":10}\n","print(dct)\n","print(type(dct))\n","dct2={\"a\":1,\"b\":3, \"a\":10}\n","print(dct2) #same variable thakle o latest value tai ney\n","\n"]},{"cell_type":"code","source":["#Demo slicing sequences::\n","#index 0 1  2  3  4  5  6\n","nums=[10,20,30,40,50,60,70]\n","print(nums)\n","print(type(nums)) #list\n","print(nums[1:4]) #from 20 to 40. 4 index will not count\n","print(nums[0:9]) # as we dont have 10 numbers, so print all which we have, all print\n","print(nums[-3:]) # last 3 numbers will print. - means last side\n","print(nums[::2]) # :: means 2 digit por por\n","print(nums[::4]) # 4 step\n","print(nums[::-1])  # reverse\n","print(nums[:-3]) # last theke 3ta element bat diye"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"DdnzLiJ1dszT","executionInfo":{"status":"ok","timestamp":1759672709644,"user_tz":-360,"elapsed":5,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"27eef1d5-abda-43ef-d274-e084257aa67a"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[10, 20, 30, 40, 50, 60, 70]\n","<class 'list'>\n","[20, 30, 40]\n","[10, 20, 30, 40, 50, 60, 70]\n","[50, 60, 70]\n","[10, 30, 50, 70]\n","[10, 50]\n","[70, 60, 50, 40, 30, 20, 10]\n","[10, 20, 30, 40]\n"]}]},{"cell_type":"code","source":["# DEMO: Truthiness\n","samples = [0, 1, \"\", \"text\", [], [1], {}, {\"k\": 1}, None]\n","for item in samples:\n","    if item:\n","        print(repr(item), \"→ Truthy\")\n","    else:\n","        print(repr(item), \"→ Falsy\")\n","\n","# --- DEMO: f-strings ---\n","name = \"Mukti\"\n","score = 95\n","print(f\"{name} scored {score}% (next: {score + 1}%)\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"yn64wAmbx-SX","executionInfo":{"status":"ok","timestamp":1759674652496,"user_tz":-360,"elapsed":5,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"c828375b-11f4-444b-8458-487a45540e01"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["0 → Falsy\n","1 → Truthy\n","'' → Falsy\n","'text' → Truthy\n","[] → Falsy\n","[1] → Truthy\n","{} → Falsy\n","{'k': 1} → Truthy\n","None → Falsy\n","Mukti scored 95% (next: 96%)\n"]}]},{"cell_type":"code","source":["# DEMO: Nested data structures:\n","data = {\n","    \"user\": {\n","        \"name\": \"Alice\",\n","        \"id\": 123,\n","        \"contact\": {\n","            \"email\": [\"alice@example.com\", \"abc@edu.com\"],\n","            \"phone\": \"555-1234\"\n","        }\n","    },\n","    \"items\": [\n","        {\"name\": \"Laptop\", \"price\": 1200},\n","        {\"name\": \"Keyboard\", \"price\": 75}\n","    ]\n","}\n","\n","print(\"User Name:\", data[\"user\"][\"name\"])\n","print(\"First Item Price:\", data[\"items\"][0][\"price\"])\n","print(\"User Email:\", data[\"user\"][\"contact\"][\"email\"][1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"Q1MemXboyGvu","executionInfo":{"status":"ok","timestamp":1759674696635,"user_tz":-360,"elapsed":6,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"13ff5b01-1f19-4c4f-889e-8b0c9f18ddac"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["User Name: Alice\n","First Item Price: 1200\n","User Email: abc@edu.com\n"]}]},{"cell_type":"code","source":["#ans:\n","order_data = {\n","    \"customer\": {\n","        \"first_name\": \"Maria\",\n","        \"last_name\": \"Mukti\"\n","    },\n","    \"items\": [\n","        {\"item_name\": \"Book\",\n","         \"price\": 25.99\n","         },\n","        {\"item_name\": \"Notebook\",\n","         \"price\": 4.50\n","         },\n","        {\"item_name\": \"Pen\",\n","         \"price\": 1.20\n","         }\n","    ]\n","}\n","\n","# 1. Customer's full name\n","full_name = f\"{order_data['customer']['first_name']} {order_data['customer']['last_name']}\" #we use f\" cause-> amr dict er value directly string er vitore boshate chai\n","print(\"Customer Full Name:\", full_name)\n","\n","# 2. Total price of all items\n","total_price = sum(item[\"price\"] for item in order_data[\"items\"])\n","print(\"Total Order Price:\", total_price)\n","\n","# 3. List of item names\n","item_names = [item[\"item_name\"] for item in order_data[\"items\"]]\n","print(\"Item Names:\", item_names)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"aD9wXZSIyiZG","executionInfo":{"status":"ok","timestamp":1759674946575,"user_tz":-360,"elapsed":6,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"32de8da5-da42-4a6a-fb6b-8b0683a28743"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Customer Full Name: Maria Mukti\n","Total Order Price: 31.689999999999998\n","Item Names: ['Book', 'Notebook', 'Pen']\n"]}]},{"cell_type":"markdown","source":["practice:\n","Problem: Analyze Order Data\n","Given the following nested dictionary representing a customer order, extract and print the following information:\n","\n","The customer's full name.\n","The total price of all items in the order.\n","A list of the names of all items in the order."],"metadata":{"id":"cqn13PbTy4dW"}},{"cell_type":"code","source":["#Exercise\n","# **E1.1**: Slice `mylist = [1,2,3,4,5,6,7,8]` to get the even-indexed items.\n","mylist = [1,2,3,4,5,6,7,8]\n","even_indexed = mylist[::2]\n","print(even_indexed)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"ycXR0Qkr0CVs","executionInfo":{"status":"ok","timestamp":1759675278986,"user_tz":-360,"elapsed":101,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"7b0fb70b-1ebb-4e14-b18c-510c69bafb6b"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 3, 5, 7]\n"]}]},{"cell_type":"code","source":["#E1.2: Using f‑strings, print: \"User: <your name>, Items: <count>\" where count is the length of a list.\n","my_name = \"Maria\"\n","items = [10, 20, 30, 40]\n","\n","print(f\"User: {my_name}, Items: {len(items)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"fDi2MWrC0OF8","executionInfo":{"status":"ok","timestamp":1759675321974,"user_tz":-360,"elapsed":122,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"f99a5123-168a-454e-a558-626db3d70244"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["User: Maria, Items: 4\n"]}]},{"cell_type":"code","source":["#Stretch: Create a dict and print a sentence using f‑strings that references two keys.\n","person = {\n","    \"first_name\": \"Maria\",\n","    \"last_name\": \"Mukti\",\n","    \"age\": 22\n","}\n","\n","print(f\"{person['first_name']} {person['last_name']} is {person['age']} years old.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"UhgrGuRc0qCt","executionInfo":{"status":"ok","timestamp":1759675403055,"user_tz":-360,"elapsed":7,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"7300e04b-77a7-4f14-d479-17dc00673f95"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Maria Mukti is 22 years old.\n"]}]},{"cell_type":"markdown","source":["# **2) Control Flow & Comprehensions**\n","Topics: if/elif/else, loops, list/dict/set comprehensions"],"metadata":{"id":"m7hgNb0x1EUs"}},{"cell_type":"code","source":["#DEMO: Control flow:\n","for i in range(10, 51):\n","    if i == 0:\n","        label = \"zero\"\n","    elif i % 2 == 0:\n","        label = \"even\"\n","    else:\n","        label = \"odd\"\n","    print(i, \"→\", label)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"2f7cY4co1KCz","executionInfo":{"status":"ok","timestamp":1759677757224,"user_tz":-360,"elapsed":5,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"55e632a4-0408-4886-afdf-b6ec5375a589"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["10 → even\n","11 → odd\n","12 → even\n","13 → odd\n","14 → even\n","15 → odd\n","16 → even\n","17 → odd\n","18 → even\n","19 → odd\n","20 → even\n","21 → odd\n","22 → even\n","23 → odd\n","24 → even\n","25 → odd\n","26 → even\n","27 → odd\n","28 → even\n","29 → odd\n","30 → even\n","31 → odd\n","32 → even\n","33 → odd\n","34 → even\n","35 → odd\n","36 → even\n","37 → odd\n","38 → even\n","39 → odd\n","40 → even\n","41 → odd\n","42 → even\n","43 → odd\n","44 → even\n","45 → odd\n","46 → even\n","47 → odd\n","48 → even\n","49 → odd\n","50 → even\n"]}]},{"cell_type":"code","source":["for i in range(5):\n","  for j in range(5):\n","    print(i)\n","    print(j)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"N67Sn-FY944l","executionInfo":{"status":"ok","timestamp":1759677761254,"user_tz":-360,"elapsed":14,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"a10ecfd8-a018-4933-d994-1be504b997dd"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","0\n","0\n","1\n","0\n","2\n","0\n","3\n","0\n","4\n","1\n","0\n","1\n","1\n","1\n","2\n","1\n","3\n","1\n","4\n","2\n","0\n","2\n","1\n","2\n","2\n","2\n","3\n","2\n","4\n","3\n","0\n","3\n","1\n","3\n","2\n","3\n","3\n","3\n","4\n","4\n","0\n","4\n","1\n","4\n","2\n","4\n","3\n","4\n","4\n"]}]},{"cell_type":"code","source":["# DEMO: Comprehensions:\n","temp = [35, 40, 28, 32, 30]\n","\n","farhen = [item*(9/5)+32 for item in temp]\n","print(f\"First {farhen}\")\n","\n","farhen1 = [item*(9/5)+32 for item in temp if item % 2 == 0]\n","print(farhen1)\n","\n","for item in temp:\n","  print(item*(9/5)+32)\n","\n","squares = [x**2 for x in range(6)]\n","\n","evens = [x for x in range(20) if x % 2 == 0]\n","\n","square_map = {x: x**2 for x in range(5)}\n","\n","unique_initials = {item[0].lower() for item in [\"Alice\", \"Bob\", \"alex\", \"Beta\"]}\n","\n","print(f\"Square is : {squares}\")\n","print(f\"even: {evens}\")\n","print(f\"smap: {square_map}\")\n","print(f\"ui : {unique_initials}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"Kee-TEI0-APj","executionInfo":{"status":"ok","timestamp":1759677791272,"user_tz":-360,"elapsed":13,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"27062ddb-2f52-4698-95a6-f83eb94ec468"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["First [95.0, 104.0, 82.4, 89.6, 86.0]\n","[104.0, 82.4, 89.6, 86.0]\n","95.0\n","104.0\n","82.4\n","89.6\n","86.0\n","Square is : [0, 1, 4, 9, 16, 25]\n","even: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n","smap: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n","ui : {'a', 'b'}\n"]}]},{"cell_type":"code","source":["nested_squares = [[x**2 for x in range(i, i+5) if x % 2 == 0] for i in range(1, 10, 3)]\n","print(\"Nested Squares:\", nested_squares)"],"metadata":{"collapsed":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"HhsilJ1g-HFL","executionInfo":{"status":"ok","timestamp":1759677807555,"user_tz":-360,"elapsed":3,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"0c22cbba-e7b8-404b-bb8f-c9516cda6833"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Nested Squares: [[4, 16], [16, 36, 64], [64, 100]]\n"]}]},{"cell_type":"code","source":["# DEMO: Nested Comprehensions and Conditional Logic:\n","# Create a list of lists where inner lists contain squares of even numbers\n","nested_squares = [[x**2 for x in range(i, i+5) if x % 2 == 0] for i in range(1, 10, 3)]\n","print(\"Nested Squares:\", nested_squares)\n","\n","# Create a dictionary mapping numbers to a description based on conditions\n","number_descriptions = {\n","    num: (\"Even and divisible by 3\" if num % 2 == 0 and num % 3 == 0\n","          else \"Even\" if num % 2 == 0\n","          else \"Odd and divisible by 3\" if num % 3 == 0\n","          else \"Odd\")\n","    for num in range(1, 100)\n","}\n","print(\"Number Descriptions:\", number_descriptions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"59ojAzms-KtE","executionInfo":{"status":"ok","timestamp":1759677822308,"user_tz":-360,"elapsed":17,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"e78261a5-10a7-4b15-f7e8-41af102bce24"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Nested Squares: [[4, 16], [16, 36, 64], [64, 100]]\n","Number Descriptions: {1: 'Odd', 2: 'Even', 3: 'Odd and divisible by 3', 4: 'Even', 5: 'Odd', 6: 'Even and divisible by 3', 7: 'Odd', 8: 'Even', 9: 'Odd and divisible by 3', 10: 'Even', 11: 'Odd', 12: 'Even and divisible by 3', 13: 'Odd', 14: 'Even', 15: 'Odd and divisible by 3', 16: 'Even', 17: 'Odd', 18: 'Even and divisible by 3', 19: 'Odd', 20: 'Even', 21: 'Odd and divisible by 3', 22: 'Even', 23: 'Odd', 24: 'Even and divisible by 3', 25: 'Odd', 26: 'Even', 27: 'Odd and divisible by 3', 28: 'Even', 29: 'Odd', 30: 'Even and divisible by 3', 31: 'Odd', 32: 'Even', 33: 'Odd and divisible by 3', 34: 'Even', 35: 'Odd', 36: 'Even and divisible by 3', 37: 'Odd', 38: 'Even', 39: 'Odd and divisible by 3', 40: 'Even', 41: 'Odd', 42: 'Even and divisible by 3', 43: 'Odd', 44: 'Even', 45: 'Odd and divisible by 3', 46: 'Even', 47: 'Odd', 48: 'Even and divisible by 3', 49: 'Odd', 50: 'Even', 51: 'Odd and divisible by 3', 52: 'Even', 53: 'Odd', 54: 'Even and divisible by 3', 55: 'Odd', 56: 'Even', 57: 'Odd and divisible by 3', 58: 'Even', 59: 'Odd', 60: 'Even and divisible by 3', 61: 'Odd', 62: 'Even', 63: 'Odd and divisible by 3', 64: 'Even', 65: 'Odd', 66: 'Even and divisible by 3', 67: 'Odd', 68: 'Even', 69: 'Odd and divisible by 3', 70: 'Even', 71: 'Odd', 72: 'Even and divisible by 3', 73: 'Odd', 74: 'Even', 75: 'Odd and divisible by 3', 76: 'Even', 77: 'Odd', 78: 'Even and divisible by 3', 79: 'Odd', 80: 'Even', 81: 'Odd and divisible by 3', 82: 'Even', 83: 'Odd', 84: 'Even and divisible by 3', 85: 'Odd', 86: 'Even', 87: 'Odd and divisible by 3', 88: 'Even', 89: 'Odd', 90: 'Even and divisible by 3', 91: 'Odd', 92: 'Even', 93: 'Odd and divisible by 3', 94: 'Even', 95: 'Odd', 96: 'Even and divisible by 3', 97: 'Odd', 98: 'Even', 99: 'Odd and divisible by 3'}\n"]}]},{"cell_type":"markdown","source":["**Problem: Analyze User Order Data**\n","Given a list of user dictionaries, where each user has a list of orders, perform the following analyses:\n","\n","Calculate and print the total amount spent by each user.\n","Create a list of all order amounts across all users.\n","Create a dictionary mapping each user's ID to the number of orders they have placed."],"metadata":{"id":"TMFT9FjN-e9r"}},{"cell_type":"code","source":["# DEMO: Combining Nested Structures with Control Flow and Comprehensions:\n","\n","# Sample data: list of user dictionaries with a list of orders for each user\n","users_data = [\n","    {\"user_id\": 1, \"name\": \"Alice\", \"orders\": [{\"order_id\": \"A1\", \"amount\": 150}, {\"order_id\": \"A2\", \"amount\": 200}]},\n","    {\"user_id\": 2, \"name\": \"Bob\", \"orders\": [{\"order_id\": \"B1\", \"amount\": 50}]},\n","    {\"user_id\": 3, \"name\": \"Charlie\", \"orders\": []}\n","]\n","\n","# Calculate the total amount spent by each user using a loop\n","print(\"Total amount spent by each user (using loop):\")\n","for user in users_data:\n","    total_spent = 0\n","    for order in user.get(\"orders\", []): # Use .get() for safe access\n","        total_spent += order.get(\"amount\", 0) # Use .get() for safe access\n","    print(f\"{user.get('name', 'N/A')}: ${total_spent}\")\n","\n","# Get a list of all order amounts across all users using a nested comprehension\n","all_order_amounts = [order.get(\"amount\", 0) for user in users_data for order in user.get(\"orders\", [])]\n","print(\"\\nAll order amounts:\", all_order_amounts)\n","\n","# Create a dictionary mapping user_id to the number of orders using a dictionary comprehension\n","orders_count_by_user = {user.get(\"user_id\"): len(user.get(\"orders\", [])) for user in users_data}\n","print(\"Number of orders per user:\", orders_count_by_user)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"DF1aYmm6-q88","executionInfo":{"status":"ok","timestamp":1759677985636,"user_tz":-360,"elapsed":58,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"25fab42b-be86-4f56-d5fb-b741414e2138"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Total amount spent by each user (using loop):\n","Alice: $350\n","Bob: $50\n","Charlie: $0\n","\n","All order amounts: [150, 200, 50]\n","Number of orders per user: {1: 2, 2: 1, 3: 0}\n"]}]},{"cell_type":"markdown","source":["E2.1: From text = \"Educating AI with Python\", build a list of vowels using a comprehension.\n","E2.2: Create a dict mapping numbers 1..5 to \"odd\"/\"even\" using a comprehension.\n","Stretch: Build a set of unique lowercase letters from a sentence, excluding spaces and punctuation.**bold text**"],"metadata":{"id":"MUSvlHdq-2jT"}},{"cell_type":"code","source":["text = \"Educating AI with Python\"\n","vowels = [ch for ch in text if ch.lower() in 'aeiou']\n","print(vowels)\n","\n","num_dict = {i: \"even\" if i % 2 == 0 else \"odd\" for i in range(1, 6)}\n","print(num_dict)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"W2cBXhgV-5Uz","executionInfo":{"status":"ok","timestamp":1759678133335,"user_tz":-360,"elapsed":14,"user":{"displayName":"Maria Mukti","userId":"01002837885654023207"}},"outputId":"ae1e64ea-4cd2-4825-9dae-1c3afb32e64a"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["['E', 'u', 'a', 'i', 'A', 'I', 'i', 'o']\n","{1: 'odd', 2: 'even', 3: 'odd', 4: 'even', 5: 'odd'}\n"]}]}]}